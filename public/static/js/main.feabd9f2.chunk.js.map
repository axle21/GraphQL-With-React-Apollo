{"version":3,"sources":["logo.png","components/launch_item.js","components/mission_key.js","components/launches.js","components/launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","launch_item","launch","flight_number","mission_name","launch_success","launch_year","launch_date_local","className","classNames","format","to","mission_key","launches_query","gql","launches","query","loading","error","data","console","log","map","key","Component","LAUNCH_QUERY","this","props","match","params","parseInt","variables","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Launches","Launch","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.feabd9f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport Moment from 'react-moment';\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nexport default function launch_item({launch : {flight_number,\r\n    mission_name,\r\n    launch_year,\r\n    launch_success,\r\n    launch_date_local\r\n    }}) {\r\n    \r\n  return (\r\n    <div className=\"card card-body mb-3\">\r\n       <div className=\"row\">\r\n        <div className=\"col-md-9\">\r\n          <h4>\r\n            Mission: <span className={classNames({\r\n                'text-success': launch_success, \r\n                'text-danger': !launch_success})}> {mission_name}</span>\r\n          </h4>\r\n            <p>Date : <Moment format=\"YYYY/MM/DD HH-mm\"> {launch_date_local}</Moment></p>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n            <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\"> Launch details</Link>\r\n        </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function mission_key() {\r\n  return (\r\n    <div className=\"my-3\">\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n      </p>\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport LaunchItem from './launch_item';\r\nimport MissionKey from './mission_key'\r\n\r\nconst launches_query = gql`\r\n\r\n    query LaunchesQuery{\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n            launch_date_local\r\n\r\n        }\r\n\r\n    }\r\n    \r\n`;\r\n\r\nexport class launches extends Component {\r\n  render() {\r\n    return (  \r\n      <Fragment>\r\n        <h1 className=\"display-4 my-3\">Launches</h1>\r\n        <MissionKey />\r\n        <Query query={launches_query}>\r\n            {\r\n                ({loading,error,data}) => {\r\n                    if(loading) return <h4>loading ...</h4>\r\n                    if(error) return console.log(error)\r\n                    console.log(data)\r\n\r\n                    return <Fragment>\r\n                        {\r\n                            data.launches.map( launch => (\r\n                                <LaunchItem key={launch.flight_number} launch={launch}/>\r\n                            )\r\n\r\n                            )\r\n                        }\r\n                    </Fragment>\r\n                }\r\n            }\r\n        </Query>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default launches\r\n","import React, { Component ,Fragment} from 'react'\r\nimport gql from 'graphql-tag';\r\nimport { Query} from 'react-apollo';\r\nimport {Link} from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      launch_date_local\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport class launch extends Component {\r\n  render() {\r\n    let { flight_number } = this.props.match.params;\r\n    flight_number = parseInt(flight_number);\r\n    return (\r\n        <Fragment>\r\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <h4>Loading...</h4>;\r\n            if (error) console.log(error);\r\n\r\n            const {\r\n              mission_name,\r\n              flight_number,\r\n              launch_year,\r\n              launch_success,\r\n              rocket: { rocket_id, rocket_name, rocket_type }\r\n            } = data.launch;\r\n\r\n            return (\r\n              <div>\r\n                <h1 className=\"display-4 my-3\">\r\n                  <span className=\"text-dark\">Mission:</span> {mission_name}\r\n                </h1>\r\n                <h4 className=\"mb-3\">Launch Details</h4>\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">\r\n                    Flight Number: {flight_number}\r\n                  </li>\r\n                  <li className=\"list-group-item\">\r\n                    Launch Year: {launch_year}\r\n                  </li>\r\n                  <li className=\"list-group-item\">\r\n                    Launch Successful:{' '}\r\n                    <span\r\n                      className={classNames({\r\n                        'text-success': launch_success,\r\n                        'text-danger': !launch_success\r\n                      })}\r\n                    >\r\n                      {launch_success ? 'Yes' : 'No'}\r\n                    </span>\r\n                  </li>\r\n                </ul>\r\n\r\n                <h4 className=\"my-3\">Rocket Details</h4>\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                  <li className=\"list-group-item\">\r\n                    Rocket Name: {rocket_name}\r\n                  </li>\r\n                  <li className=\"list-group-item\">\r\n                    Rocket Type: {rocket_type}\r\n                  </li>\r\n                </ul>\r\n                <hr />\r\n                <Link to=\"/\" className=\"btn btn-secondary\">\r\n                  Back\r\n                </Link>\r\n              </div>\r\n            );\r\n          }}\r\n        </Query>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default launch\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './logo.png';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport Launches from './components/launches';\nimport Launch from './components/launch';\nimport {BrowserRouter as Router, Route } from 'react-router-dom';\n\nconst client = new ApolloClient({\n  uri:'/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <img\n              src={logo}\n              alt=\"SpaceX\"\n              style={{ width: 300, display: 'block', margin: 'auto' }}\n            />\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}